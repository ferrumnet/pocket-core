// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/bridgefee/bridgefee.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/pokt-network/pocket-core/codec/types"
	_ "github.com/pokt-network/pocket-core/types"
	github_com_pokt_network_pocket_core_types "github.com/pokt-network/pocket-core/types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TargetType int32

const (
	TargetType_NotSet     TargetType = 0
	TargetType_Burn       TargetType = 1
	TargetType_Address    TargetType = 2
	TargetType_RewardPool TargetType = 3
)

var TargetType_name = map[int32]string{
	0: "NotSet",
	1: "Burn",
	2: "Address",
	3: "RewardPool",
}

var TargetType_value = map[string]int32{
	"NotSet":     0,
	"Burn":       1,
	"Address":    2,
	"RewardPool": 3,
}

func (x TargetType) String() string {
	return proto.EnumName(TargetType_name, int32(x))
}

func (TargetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{0}
}

type TokenInfo struct {
	Token               string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	BufferSize          uint64 `protobuf:"varint,2,opt,name=bufferSize,proto3" json:"bufferSize,omitempty"`
	TokenSpecificConfig uint32 `protobuf:"varint,3,opt,name=tokenSpecificConfig,proto3" json:"tokenSpecificConfig,omitempty"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{0}
}
func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenInfo) GetBufferSize() uint64 {
	if m != nil {
		return m.BufferSize
	}
	return 0
}

func (m *TokenInfo) GetTokenSpecificConfig() uint32 {
	if m != nil {
		return m.TokenSpecificConfig
	}
	return 0
}

type TargetInfo struct {
	Target string     `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TType  TargetType `protobuf:"varint,2,opt,name=tType,proto3,enum=x.bridgefee.TargetType" json:"tType,omitempty"`
	Weight uint64     `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *TargetInfo) Reset()         { *m = TargetInfo{} }
func (m *TargetInfo) String() string { return proto.CompactTextString(m) }
func (*TargetInfo) ProtoMessage()    {}
func (*TargetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{1}
}
func (m *TargetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetInfo.Merge(m, src)
}
func (m *TargetInfo) XXX_Size() int {
	return m.Size()
}
func (m *TargetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TargetInfo proto.InternalMessageInfo

func (m *TargetInfo) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *TargetInfo) GetTType() TargetType {
	if m != nil {
		return m.TType
	}
	return TargetType_NotSet
}

func (m *TargetInfo) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type TokenTargetInfo struct {
	Token   string       `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Targets []TargetInfo `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets"`
}

func (m *TokenTargetInfo) Reset()         { *m = TokenTargetInfo{} }
func (m *TokenTargetInfo) String() string { return proto.CompactTextString(m) }
func (*TokenTargetInfo) ProtoMessage()    {}
func (*TokenTargetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{2}
}
func (m *TokenTargetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenTargetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenTargetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenTargetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenTargetInfo.Merge(m, src)
}
func (m *TokenTargetInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenTargetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenTargetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenTargetInfo proto.InternalMessageInfo

func (m *TokenTargetInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenTargetInfo) GetTargets() []TargetInfo {
	if m != nil {
		return m.Targets
	}
	return nil
}

// The state of the module from the beginning
type GenesisState struct {
	Params        Params            `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	AllowedActors []string          `protobuf:"bytes,2,rep,name=allowedActors,proto3" json:"allowedActors,omitempty"`
	TokenInfos    []TokenInfo       `protobuf:"bytes,3,rep,name=tokenInfos,proto3" json:"tokenInfos"`
	TokenTargets  []TokenTargetInfo `protobuf:"bytes,4,rep,name=tokenTargets,proto3" json:"tokenTargets"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetAllowedActors() []string {
	if m != nil {
		return m.AllowedActors
	}
	return nil
}

func (m *GenesisState) GetTokenInfos() []TokenInfo {
	if m != nil {
		return m.TokenInfos
	}
	return nil
}

func (m *GenesisState) GetTokenTargets() []TokenTargetInfo {
	if m != nil {
		return m.TokenTargets
	}
	return nil
}

type Params struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type MsgAddAllowedActor struct {
	FromAddress github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,1,opt,name=fromAddress,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"fromAddress"`
	Actor       string                                            `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (m *MsgAddAllowedActor) Reset()         { *m = MsgAddAllowedActor{} }
func (m *MsgAddAllowedActor) String() string { return proto.CompactTextString(m) }
func (*MsgAddAllowedActor) ProtoMessage()    {}
func (*MsgAddAllowedActor) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{5}
}
func (m *MsgAddAllowedActor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAllowedActor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAllowedActor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAllowedActor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAllowedActor.Merge(m, src)
}
func (m *MsgAddAllowedActor) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAllowedActor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAllowedActor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAllowedActor proto.InternalMessageInfo

func (*MsgAddAllowedActor) XXX_MessageName() string {
	return "x.bridgefee.MsgAddAllowedActor"
}

type MsgRemoveAllowedActor struct {
	FromAddress github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,1,opt,name=fromAddress,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"fromAddress"`
	Actor       string                                            `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (m *MsgRemoveAllowedActor) Reset()         { *m = MsgRemoveAllowedActor{} }
func (m *MsgRemoveAllowedActor) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAllowedActor) ProtoMessage()    {}
func (*MsgRemoveAllowedActor) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{6}
}
func (m *MsgRemoveAllowedActor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAllowedActor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAllowedActor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAllowedActor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAllowedActor.Merge(m, src)
}
func (m *MsgRemoveAllowedActor) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAllowedActor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAllowedActor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAllowedActor proto.InternalMessageInfo

func (*MsgRemoveAllowedActor) XXX_MessageName() string {
	return "x.bridgefee.MsgRemoveAllowedActor"
}

type MsgSetTokenInfo struct {
	FromAddress github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,1,opt,name=fromAddress,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"fromAddress"`
	Info        TokenInfo                                         `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
}

func (m *MsgSetTokenInfo) Reset()         { *m = MsgSetTokenInfo{} }
func (m *MsgSetTokenInfo) String() string { return proto.CompactTextString(m) }
func (*MsgSetTokenInfo) ProtoMessage()    {}
func (*MsgSetTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{7}
}
func (m *MsgSetTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetTokenInfo.Merge(m, src)
}
func (m *MsgSetTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetTokenInfo proto.InternalMessageInfo

func (*MsgSetTokenInfo) XXX_MessageName() string {
	return "x.bridgefee.MsgSetTokenInfo"
}

type MsgSetTokenTargetInfos struct {
	FromAddress github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,1,opt,name=fromAddress,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"fromAddress"`
	Token       string                                            `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Targets     []TargetInfo                                      `protobuf:"bytes,3,rep,name=targets,proto3" json:"targets"`
}

func (m *MsgSetTokenTargetInfos) Reset()         { *m = MsgSetTokenTargetInfos{} }
func (m *MsgSetTokenTargetInfos) String() string { return proto.CompactTextString(m) }
func (*MsgSetTokenTargetInfos) ProtoMessage()    {}
func (*MsgSetTokenTargetInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{8}
}
func (m *MsgSetTokenTargetInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetTokenTargetInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetTokenTargetInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetTokenTargetInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetTokenTargetInfos.Merge(m, src)
}
func (m *MsgSetTokenTargetInfos) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetTokenTargetInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetTokenTargetInfos.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetTokenTargetInfos proto.InternalMessageInfo

func (m *MsgSetTokenTargetInfos) GetFromAddress() github_com_pokt_network_pocket_core_types.Address {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *MsgSetTokenTargetInfos) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MsgSetTokenTargetInfos) GetTargets() []TargetInfo {
	if m != nil {
		return m.Targets
	}
	return nil
}

type MsgSetGlobalTargetInfos struct {
	FromAddress github_com_pokt_network_pocket_core_types.Address `protobuf:"bytes,1,opt,name=fromAddress,proto3,casttype=github.com/pokt-network/pocket-core/types.Address" json:"fromAddress"`
	Targets     []TargetInfo                                      `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets"`
}

func (m *MsgSetGlobalTargetInfos) Reset()         { *m = MsgSetGlobalTargetInfos{} }
func (m *MsgSetGlobalTargetInfos) String() string { return proto.CompactTextString(m) }
func (*MsgSetGlobalTargetInfos) ProtoMessage()    {}
func (*MsgSetGlobalTargetInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c309fb2d9a4e22, []int{9}
}
func (m *MsgSetGlobalTargetInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetGlobalTargetInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGlobalTargetInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetGlobalTargetInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGlobalTargetInfos.Merge(m, src)
}
func (m *MsgSetGlobalTargetInfos) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetGlobalTargetInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGlobalTargetInfos.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGlobalTargetInfos proto.InternalMessageInfo

func (m *MsgSetGlobalTargetInfos) GetFromAddress() github_com_pokt_network_pocket_core_types.Address {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *MsgSetGlobalTargetInfos) GetTargets() []TargetInfo {
	if m != nil {
		return m.Targets
	}
	return nil
}

func init() {
	proto.RegisterEnum("x.bridgefee.TargetType", TargetType_name, TargetType_value)
	proto.RegisterType((*TokenInfo)(nil), "x.bridgefee.TokenInfo")
	proto.RegisterType((*TargetInfo)(nil), "x.bridgefee.TargetInfo")
	proto.RegisterType((*TokenTargetInfo)(nil), "x.bridgefee.TokenTargetInfo")
	proto.RegisterType((*GenesisState)(nil), "x.bridgefee.GenesisState")
	proto.RegisterType((*Params)(nil), "x.bridgefee.Params")
	proto.RegisterType((*MsgAddAllowedActor)(nil), "x.bridgefee.MsgAddAllowedActor")
	proto.RegisterType((*MsgRemoveAllowedActor)(nil), "x.bridgefee.MsgRemoveAllowedActor")
	proto.RegisterType((*MsgSetTokenInfo)(nil), "x.bridgefee.MsgSetTokenInfo")
	proto.RegisterType((*MsgSetTokenTargetInfos)(nil), "x.bridgefee.MsgSetTokenTargetInfos")
	proto.RegisterType((*MsgSetGlobalTargetInfos)(nil), "x.bridgefee.MsgSetGlobalTargetInfos")
}

func init() { proto.RegisterFile("x/bridgefee/bridgefee.proto", fileDescriptor_d9c309fb2d9a4e22) }

var fileDescriptor_d9c309fb2d9a4e22 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xce, 0x24, 0x69, 0xda, 0x9c, 0xf4, 0x27, 0x9a, 0xf6, 0xb6, 0x69, 0xef, 0x95, 0x13, 0x59,
	0x77, 0x11, 0x21, 0x35, 0x6e, 0x8b, 0x10, 0x12, 0x42, 0x42, 0x09, 0x88, 0x8a, 0x45, 0xa1, 0x72,
	0xba, 0x62, 0x03, 0x8e, 0x3d, 0x76, 0xad, 0x24, 0x3e, 0x96, 0x67, 0x42, 0x5a, 0x9e, 0xa0, 0x4b,
	0x1e, 0x00, 0x09, 0xc4, 0x3b, 0xb0, 0xe1, 0x09, 0xba, 0xa3, 0x4b, 0x56, 0x15, 0x6a, 0x77, 0x48,
	0xbc, 0x00, 0x2b, 0xe4, 0x19, 0x87, 0x38, 0x6a, 0x11, 0x3f, 0x8b, 0xc2, 0xce, 0xdf, 0xf9, 0xfb,
	0xbe, 0x73, 0x3c, 0x67, 0x06, 0xfe, 0x3d, 0x30, 0x3a, 0x91, 0xef, 0x78, 0xcc, 0x65, 0x6c, 0xfc,
	0xd5, 0x08, 0x23, 0x14, 0x48, 0x4b, 0x07, 0x8d, 0x6f, 0xa6, 0xb5, 0x55, 0x1b, 0x79, 0x1f, 0xf9,
	0x13, 0xe9, 0x32, 0x14, 0x50, 0x71, 0x6b, 0x4b, 0x1e, 0x7a, 0xa8, 0xec, 0xf1, 0x57, 0x62, 0x2d,
	0x8b, 0xc3, 0x90, 0x71, 0xc3, 0x46, 0x3f, 0x48, 0x2c, 0xab, 0x1e, 0xa2, 0xd7, 0x63, 0x86, 0x44,
	0x9d, 0x81, 0x6b, 0x58, 0xc1, 0xa1, 0x72, 0xe9, 0x1c, 0x8a, 0x7b, 0xd8, 0x65, 0xc1, 0x83, 0xc0,
	0x45, 0xba, 0x04, 0x53, 0x22, 0x06, 0x15, 0x52, 0x23, 0xf5, 0xa2, 0xa9, 0x00, 0xd5, 0x00, 0x3a,
	0x03, 0xd7, 0x65, 0x51, 0xdb, 0x7f, 0xce, 0x2a, 0xd9, 0x1a, 0xa9, 0xe7, 0xcd, 0x94, 0x85, 0x6e,
	0xc0, 0xa2, 0x0c, 0x6c, 0x87, 0xcc, 0xf6, 0x5d, 0xdf, 0xbe, 0x8b, 0x81, 0xeb, 0x7b, 0x95, 0x5c,
	0x8d, 0xd4, 0xe7, 0xcc, 0xcb, 0x5c, 0x7a, 0x17, 0x60, 0xcf, 0x8a, 0x3c, 0x26, 0x24, 0xeb, 0x32,
	0x14, 0x84, 0x44, 0x09, 0x6d, 0x82, 0xe8, 0x3a, 0x4c, 0x89, 0xbd, 0xc3, 0x50, 0x51, 0xce, 0x6f,
	0xad, 0x34, 0x52, 0x53, 0x69, 0xa8, 0xfc, 0xd8, 0x6d, 0xaa, 0xa8, 0xb8, 0xcc, 0x90, 0xf9, 0xde,
	0xbe, 0x90, 0xcc, 0x79, 0x33, 0x41, 0xfa, 0x53, 0x58, 0x90, 0x1d, 0xa6, 0x18, 0x2f, 0xef, 0xf3,
	0x26, 0x4c, 0x2b, 0x66, 0x5e, 0xc9, 0xd6, 0x72, 0xf5, 0xd2, 0xa5, 0x8c, 0x71, 0x7e, 0x2b, 0x7f,
	0x7c, 0x5a, 0xcd, 0x98, 0xa3, 0x68, 0xfd, 0x33, 0x81, 0xd9, 0x6d, 0x16, 0x30, 0xee, 0xf3, 0xb6,
	0xb0, 0x04, 0xa3, 0x9b, 0x50, 0x08, 0xad, 0xc8, 0xea, 0x73, 0x49, 0x50, 0xda, 0x5a, 0x9c, 0x28,
	0xb4, 0x2b, 0x5d, 0x49, 0x91, 0x24, 0x90, 0xfe, 0x0f, 0x73, 0x56, 0xaf, 0x87, 0x43, 0xe6, 0x34,
	0x6d, 0x81, 0x91, 0x92, 0x50, 0x34, 0x27, 0x8d, 0xf4, 0x36, 0x80, 0x18, 0xfd, 0x2d, 0x5e, 0xc9,
	0x49, 0x95, 0xcb, 0x93, 0x2a, 0x47, 0xee, 0xa4, 0x7e, 0x2a, 0x9e, 0xde, 0x87, 0x59, 0x31, 0x9e,
	0x04, 0xaf, 0xe4, 0x65, 0xfe, 0x7f, 0x17, 0xf3, 0x2f, 0xb4, 0x3a, 0x91, 0xa7, 0x6b, 0x50, 0x50,
	0x3d, 0xc4, 0x83, 0xc4, 0x61, 0xc0, 0xa2, 0xd1, 0x20, 0x25, 0xd0, 0x5f, 0x12, 0xa0, 0x3b, 0xdc,
	0x6b, 0x3a, 0x4e, 0x33, 0xa5, 0x9e, 0xba, 0x50, 0x72, 0x23, 0xec, 0x37, 0x1d, 0x27, 0x62, 0x5c,
	0x8d, 0x66, 0xb6, 0x75, 0xef, 0xd3, 0x69, 0x35, 0x6d, 0xfe, 0x72, 0x5a, 0xdd, 0xf4, 0x7c, 0xb1,
	0x3f, 0xe8, 0x34, 0x6c, 0xec, 0x1b, 0x21, 0x76, 0xc5, 0x7a, 0xc0, 0xc4, 0x10, 0xa3, 0xae, 0x11,
	0xa2, 0xdd, 0x65, 0x62, 0xdd, 0xc6, 0x88, 0x19, 0xf2, 0x8c, 0x37, 0x92, 0x24, 0x33, 0x5d, 0x21,
	0x16, 0x65, 0xc5, 0x84, 0xf2, 0xdc, 0x14, 0x4d, 0x05, 0x6e, 0xcd, 0x1c, 0xbd, 0xae, 0x66, 0x8e,
	0xde, 0x54, 0x89, 0xfe, 0x8a, 0xc0, 0x3f, 0x3b, 0xdc, 0x33, 0x59, 0x1f, 0x9f, 0xb1, 0xbf, 0x52,
	0xe1, 0x5b, 0x02, 0x0b, 0x3b, 0xdc, 0x6b, 0x33, 0x31, 0xde, 0xcd, 0xab, 0xd2, 0xb6, 0x01, 0x79,
	0x3f, 0x70, 0x51, 0x4a, 0xfb, 0xd1, 0xe1, 0x92, 0x91, 0x29, 0xdd, 0xef, 0x09, 0x2c, 0xa7, 0x74,
	0x8f, 0x8f, 0x11, 0xbf, 0xca, 0xd1, 0xaa, 0xd5, 0xce, 0x7e, 0x67, 0xb5, 0x73, 0xbf, 0xb4, 0xda,
	0xef, 0x08, 0xac, 0xa8, 0x8e, 0xb6, 0x7b, 0xd8, 0xb1, 0x7a, 0x7f, 0xa2, 0xa5, 0xdf, 0xbd, 0x97,
	0xae, 0xdd, 0x19, 0x5d, 0xb3, 0xf2, 0x7e, 0x04, 0x28, 0x3c, 0x44, 0xd1, 0x66, 0xa2, 0x9c, 0xa1,
	0x33, 0x90, 0x6f, 0x0d, 0xa2, 0xa0, 0x4c, 0x68, 0x09, 0xa6, 0x13, 0x9e, 0x72, 0x96, 0xce, 0x03,
	0x98, 0x6c, 0x68, 0x45, 0xce, 0x2e, 0x62, 0xaf, 0x9c, 0x6b, 0x3d, 0x3a, 0x3e, 0xd3, 0xc8, 0xc9,
	0x99, 0x46, 0x3e, 0x9e, 0x69, 0xe4, 0xc5, 0xb9, 0x96, 0x39, 0x39, 0xd7, 0x32, 0x1f, 0xce, 0xb5,
	0xcc, 0xe3, 0x1b, 0x3f, 0xd3, 0x53, 0xfa, 0x89, 0x93, 0xfd, 0x75, 0x0a, 0xf2, 0xd1, 0xb9, 0xfe,
	0x35, 0x00, 0x00, 0xff, 0xff, 0x86, 0xc8, 0x84, 0x15, 0xfe, 0x06, 0x00, 0x00,
}

func (m *TokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenSpecificConfig != 0 {
		i = encodeVarintBridgefee(dAtA, i, uint64(m.TokenSpecificConfig))
		i--
		dAtA[i] = 0x18
	}
	if m.BufferSize != 0 {
		i = encodeVarintBridgefee(dAtA, i, uint64(m.BufferSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TargetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintBridgefee(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if m.TType != 0 {
		i = encodeVarintBridgefee(dAtA, i, uint64(m.TType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenTargetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenTargetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenTargetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Targets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridgefee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenTargets) > 0 {
		for iNdEx := len(m.TokenTargets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenTargets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridgefee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TokenInfos) > 0 {
		for iNdEx := len(m.TokenInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridgefee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AllowedActors) > 0 {
		for iNdEx := len(m.AllowedActors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedActors[iNdEx])
			copy(dAtA[i:], m.AllowedActors[iNdEx])
			i = encodeVarintBridgefee(dAtA, i, uint64(len(m.AllowedActors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBridgefee(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAllowedActor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAllowedActor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAllowedActor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAllowedActor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAllowedActor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAllowedActor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBridgefee(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetTokenTargetInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetTokenTargetInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetTokenTargetInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Targets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridgefee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetGlobalTargetInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGlobalTargetInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGlobalTargetInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Targets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridgefee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintBridgefee(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBridgefee(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridgefee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	if m.BufferSize != 0 {
		n += 1 + sovBridgefee(uint64(m.BufferSize))
	}
	if m.TokenSpecificConfig != 0 {
		n += 1 + sovBridgefee(uint64(m.TokenSpecificConfig))
	}
	return n
}

func (m *TargetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	if m.TType != 0 {
		n += 1 + sovBridgefee(uint64(m.TType))
	}
	if m.Weight != 0 {
		n += 1 + sovBridgefee(uint64(m.Weight))
	}
	return n
}

func (m *TokenTargetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovBridgefee(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovBridgefee(uint64(l))
	if len(m.AllowedActors) > 0 {
		for _, s := range m.AllowedActors {
			l = len(s)
			n += 1 + l + sovBridgefee(uint64(l))
		}
	}
	if len(m.TokenInfos) > 0 {
		for _, e := range m.TokenInfos {
			l = e.Size()
			n += 1 + l + sovBridgefee(uint64(l))
		}
	}
	if len(m.TokenTargets) > 0 {
		for _, e := range m.TokenTargets {
			l = e.Size()
			n += 1 + l + sovBridgefee(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	return n
}

func (m *MsgAddAllowedActor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	return n
}

func (m *MsgRemoveAllowedActor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	return n
}

func (m *MsgSetTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	l = m.Info.Size()
	n += 1 + l + sovBridgefee(uint64(l))
	return n
}

func (m *MsgSetTokenTargetInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovBridgefee(uint64(l))
		}
	}
	return n
}

func (m *MsgSetGlobalTargetInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovBridgefee(uint64(l))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovBridgefee(uint64(l))
		}
	}
	return n
}

func sovBridgefee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridgefee(x uint64) (n int) {
	return sovBridgefee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSize", wireType)
			}
			m.BufferSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSpecificConfig", wireType)
			}
			m.TokenSpecificConfig = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenSpecificConfig |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TType", wireType)
			}
			m.TType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TType |= TargetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenTargetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenTargetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenTargetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, TargetInfo{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedActors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedActors = append(m.AllowedActors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenInfos = append(m.TokenInfos, TokenInfo{})
			if err := m.TokenInfos[len(m.TokenInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTargets = append(m.TokenTargets, TokenTargetInfo{})
			if err := m.TokenTargets[len(m.TokenTargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAllowedActor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAllowedActor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAllowedActor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAllowedActor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAllowedActor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAllowedActor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetTokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetTokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetTokenTargetInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetTokenTargetInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetTokenTargetInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, TargetInfo{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetGlobalTargetInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGlobalTargetInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGlobalTargetInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgefee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgefee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, TargetInfo{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgefee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgefee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridgefee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridgefee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgefee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridgefee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridgefee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridgefee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridgefee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridgefee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridgefee = fmt.Errorf("proto: unexpected end of group")
)
