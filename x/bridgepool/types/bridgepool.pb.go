// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/bridgepool/bridgepool.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/pokt-network/pocket-core/codec/types"
	_ "github.com/pokt-network/pocket-core/types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The state of the module from the beginning
type GenesisState struct {
	Params      *Params           `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Signers     []string          `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	Liquidities []*TokenLiquidity `protobuf:"bytes,3,rep,name=liquidities,proto3" json:"liquidities,omitempty"`
	Fees        []string          `protobuf:"bytes,4,rep,name=fees,proto3" json:"fees,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf2927c36d8981b, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *GenesisState) GetLiquidities() []*TokenLiquidity {
	if m != nil {
		return m.Liquidities
	}
	return nil
}

func (m *GenesisState) GetFees() []string {
	if m != nil {
		return m.Fees
	}
	return nil
}

type Params struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf2927c36d8981b, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type TokenLiquidity struct {
	Providers []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	Amounts   []string `protobuf:"bytes,2,rep,name=amounts,proto3" json:"amounts,omitempty"`
}

func (m *TokenLiquidity) Reset()         { *m = TokenLiquidity{} }
func (m *TokenLiquidity) String() string { return proto.CompactTextString(m) }
func (*TokenLiquidity) ProtoMessage()    {}
func (*TokenLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf2927c36d8981b, []int{2}
}
func (m *TokenLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenLiquidity.Merge(m, src)
}
func (m *TokenLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *TokenLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_TokenLiquidity proto.InternalMessageInfo

func (m *TokenLiquidity) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *TokenLiquidity) GetAmounts() []string {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type TokenTarget struct {
	Token       string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ChainId     string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TargetToken string `protobuf:"bytes,3,opt,name=target_token,json=targetToken,proto3" json:"target_token,omitempty"`
}

func (m *TokenTarget) Reset()         { *m = TokenTarget{} }
func (m *TokenTarget) String() string { return proto.CompactTextString(m) }
func (*TokenTarget) ProtoMessage()    {}
func (*TokenTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf2927c36d8981b, []int{3}
}
func (m *TokenTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenTarget.Merge(m, src)
}
func (m *TokenTarget) XXX_Size() int {
	return m.Size()
}
func (m *TokenTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenTarget.DiscardUnknown(m)
}

var xxx_messageInfo_TokenTarget proto.InternalMessageInfo

func (m *TokenTarget) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenTarget) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *TokenTarget) GetTargetToken() string {
	if m != nil {
		return m.TargetToken
	}
	return ""
}

// define events
type EventTransferBySignature struct {
	Signer   string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount   string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee      string `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *EventTransferBySignature) Reset()         { *m = EventTransferBySignature{} }
func (m *EventTransferBySignature) String() string { return proto.CompactTextString(m) }
func (*EventTransferBySignature) ProtoMessage()    {}
func (*EventTransferBySignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf2927c36d8981b, []int{4}
}
func (m *EventTransferBySignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTransferBySignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTransferBySignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTransferBySignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTransferBySignature.Merge(m, src)
}
func (m *EventTransferBySignature) XXX_Size() int {
	return m.Size()
}
func (m *EventTransferBySignature) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTransferBySignature.DiscardUnknown(m)
}

var xxx_messageInfo_EventTransferBySignature proto.InternalMessageInfo

func (m *EventTransferBySignature) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EventTransferBySignature) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventTransferBySignature) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventTransferBySignature) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventTransferBySignature) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

type EventBridgeLiquidityAdded struct {
	Actor  string `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventBridgeLiquidityAdded) Reset()         { *m = EventBridgeLiquidityAdded{} }
func (m *EventBridgeLiquidityAdded) String() string { return proto.CompactTextString(m) }
func (*EventBridgeLiquidityAdded) ProtoMessage()    {}
func (*EventBridgeLiquidityAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf2927c36d8981b, []int{5}
}
func (m *EventBridgeLiquidityAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBridgeLiquidityAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBridgeLiquidityAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBridgeLiquidityAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBridgeLiquidityAdded.Merge(m, src)
}
func (m *EventBridgeLiquidityAdded) XXX_Size() int {
	return m.Size()
}
func (m *EventBridgeLiquidityAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBridgeLiquidityAdded.DiscardUnknown(m)
}

var xxx_messageInfo_EventBridgeLiquidityAdded proto.InternalMessageInfo

func (m *EventBridgeLiquidityAdded) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *EventBridgeLiquidityAdded) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventBridgeLiquidityAdded) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventBridgeLiquidityRemoved struct {
	Actor  string `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventBridgeLiquidityRemoved) Reset()         { *m = EventBridgeLiquidityRemoved{} }
func (m *EventBridgeLiquidityRemoved) String() string { return proto.CompactTextString(m) }
func (*EventBridgeLiquidityRemoved) ProtoMessage()    {}
func (*EventBridgeLiquidityRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf2927c36d8981b, []int{6}
}
func (m *EventBridgeLiquidityRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBridgeLiquidityRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBridgeLiquidityRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBridgeLiquidityRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBridgeLiquidityRemoved.Merge(m, src)
}
func (m *EventBridgeLiquidityRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventBridgeLiquidityRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBridgeLiquidityRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventBridgeLiquidityRemoved proto.InternalMessageInfo

func (m *EventBridgeLiquidityRemoved) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *EventBridgeLiquidityRemoved) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventBridgeLiquidityRemoved) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type EventBridgeSwap struct {
	From          string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TargetNetwork string `protobuf:"bytes,3,opt,name=target_network,json=targetNetwork,proto3" json:"target_network,omitempty"`
	TargetToken   string `protobuf:"bytes,4,opt,name=target_token,json=targetToken,proto3" json:"target_token,omitempty"`
	TargetAddress string `protobuf:"bytes,5,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
	Amount        string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventBridgeSwap) Reset()         { *m = EventBridgeSwap{} }
func (m *EventBridgeSwap) String() string { return proto.CompactTextString(m) }
func (*EventBridgeSwap) ProtoMessage()    {}
func (*EventBridgeSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cf2927c36d8981b, []int{7}
}
func (m *EventBridgeSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBridgeSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBridgeSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBridgeSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBridgeSwap.Merge(m, src)
}
func (m *EventBridgeSwap) XXX_Size() int {
	return m.Size()
}
func (m *EventBridgeSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBridgeSwap.DiscardUnknown(m)
}

var xxx_messageInfo_EventBridgeSwap proto.InternalMessageInfo

func (m *EventBridgeSwap) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *EventBridgeSwap) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventBridgeSwap) GetTargetNetwork() string {
	if m != nil {
		return m.TargetNetwork
	}
	return ""
}

func (m *EventBridgeSwap) GetTargetToken() string {
	if m != nil {
		return m.TargetToken
	}
	return ""
}

func (m *EventBridgeSwap) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *EventBridgeSwap) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "x.bridgepool.GenesisState")
	proto.RegisterType((*Params)(nil), "x.bridgepool.Params")
	proto.RegisterType((*TokenLiquidity)(nil), "x.bridgepool.TokenLiquidity")
	proto.RegisterType((*TokenTarget)(nil), "x.bridgepool.TokenTarget")
	proto.RegisterType((*EventTransferBySignature)(nil), "x.bridgepool.EventTransferBySignature")
	proto.RegisterType((*EventBridgeLiquidityAdded)(nil), "x.bridgepool.EventBridgeLiquidityAdded")
	proto.RegisterType((*EventBridgeLiquidityRemoved)(nil), "x.bridgepool.EventBridgeLiquidityRemoved")
	proto.RegisterType((*EventBridgeSwap)(nil), "x.bridgepool.EventBridgeSwap")
}

func init() { proto.RegisterFile("x/bridgepool/bridgepool.proto", fileDescriptor_4cf2927c36d8981b) }

var fileDescriptor_4cf2927c36d8981b = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0x6e, 0x1a, 0x9a, 0xb6, 0x86, 0x75, 0x95, 0x85, 0xaa, 0xc0, 0xba, 0x88, 0x45, 0x9a, 0xc4,
	0x61, 0x25, 0x52, 0x27, 0xed, 0x38, 0xa9, 0x48, 0xd3, 0x36, 0x69, 0x9a, 0x2a, 0xe0, 0xb4, 0x0b,
	0x32, 0xc9, 0x23, 0xb5, 0x20, 0x76, 0x66, 0x1b, 0x28, 0x7f, 0x62, 0xda, 0xef, 0xd8, 0xef, 0xd8,
	0x61, 0xc7, 0x1e, 0x77, 0x9c, 0xe0, 0x8f, 0x4c, 0xb1, 0x5d, 0x08, 0x6a, 0x77, 0xdb, 0xed, 0x7d,
	0xdf, 0xb3, 0xbf, 0xef, 0xf3, 0x7b, 0x10, 0xf4, 0xfc, 0x36, 0x1a, 0x09, 0x9a, 0xa4, 0x90, 0x73,
	0x3e, 0x2d, 0x95, 0x9d, 0x5c, 0x70, 0xc5, 0x71, 0xed, 0xb6, 0xb3, 0xe5, 0x9a, 0x8d, 0x98, 0xcb,
	0x8c, 0xcb, 0xa1, 0xee, 0x45, 0x06, 0x98, 0x83, 0xcd, 0x7a, 0xca, 0x53, 0x6e, 0xf8, 0xa2, 0xb2,
	0xec, 0xa9, 0x5a, 0xe6, 0x20, 0xa3, 0x98, 0x53, 0x66, 0x99, 0x46, 0xca, 0x79, 0x3a, 0x85, 0x48,
	0xa3, 0xd1, 0x6c, 0x1c, 0x11, 0xb6, 0x34, 0xad, 0xf0, 0x87, 0x83, 0x6a, 0xef, 0x81, 0x81, 0xa4,
	0xb2, 0xaf, 0x88, 0x02, 0xfc, 0x0a, 0x79, 0x39, 0x11, 0x24, 0x93, 0xbe, 0xd3, 0x72, 0xda, 0xd5,
	0xcb, 0x7a, 0xa7, 0x9c, 0xa6, 0x73, 0xad, 0x7b, 0x3d, 0x7b, 0x06, 0xfb, 0xe8, 0x50, 0xd2, 0x94,
	0x81, 0x90, 0xfe, 0x7e, 0xcb, 0x6d, 0x1f, 0xf7, 0xee, 0x21, 0x7e, 0x8b, 0xaa, 0x53, 0xfa, 0x75,
	0x46, 0x13, 0xaa, 0x28, 0x48, 0xdf, 0x6d, 0xb9, 0xed, 0xea, 0xe5, 0xf9, 0xae, 0xd8, 0x80, 0x4f,
	0x80, 0x7d, 0xb2, 0xa7, 0x96, 0xbd, 0xf2, 0x05, 0x8c, 0x51, 0x65, 0x0c, 0x20, 0xfd, 0x8a, 0x96,
	0xd5, 0x75, 0x18, 0x20, 0xcf, 0xf8, 0xe3, 0x3a, 0x3a, 0xe0, 0x0b, 0x06, 0x42, 0x87, 0x3c, 0xee,
	0x19, 0x10, 0x7e, 0x40, 0x27, 0xbb, 0x92, 0xf8, 0x1c, 0x1d, 0xe7, 0x82, 0xcf, 0x69, 0x52, 0x24,
	0x74, 0xb4, 0xd4, 0x96, 0x28, 0xd2, 0x93, 0x8c, 0xcf, 0x98, 0xda, 0xa4, 0xb7, 0x30, 0x24, 0xa8,
	0xaa, 0x95, 0x06, 0x44, 0xa4, 0xa0, 0x0a, 0x3b, 0x55, 0xc0, 0x7b, 0x3b, 0x0d, 0x70, 0x03, 0x1d,
	0xc5, 0x37, 0x84, 0xb2, 0x21, 0x4d, 0xfc, 0x7d, 0xdd, 0x38, 0xd4, 0xf8, 0x63, 0x82, 0x5f, 0xa0,
	0x9a, 0xd2, 0x57, 0x87, 0xe6, 0x9e, 0xab, 0xdb, 0x55, 0xc3, 0x69, 0xe5, 0xf0, 0x9b, 0x83, 0xfc,
	0x77, 0x73, 0x60, 0x6a, 0x20, 0x08, 0x93, 0x63, 0x10, 0xdd, 0x65, 0x9f, 0xa6, 0x8c, 0xa8, 0x99,
	0x00, 0x7c, 0x86, 0x3c, 0x33, 0x48, 0xeb, 0x68, 0x11, 0x6e, 0xa2, 0x23, 0x01, 0x31, 0xd0, 0x39,
	0x08, 0x6b, 0xb9, 0xc1, 0xdb, 0x90, 0x6e, 0x39, 0xe4, 0x19, 0xf2, 0xcc, 0xa3, 0xfc, 0x8a, 0x51,
	0x32, 0x08, 0x9f, 0x22, 0x77, 0x0c, 0xe0, 0x1f, 0x68, 0xb2, 0x28, 0xc3, 0x21, 0x6a, 0xe8, 0x3c,
	0x5d, 0xbd, 0xa0, 0xcd, 0x0c, 0xaf, 0x92, 0x04, 0x92, 0x42, 0x9c, 0xc4, 0x8a, 0x6f, 0x06, 0xae,
	0xc1, 0xd6, 0x72, 0xff, 0x71, 0x4b, 0xb7, 0x6c, 0x19, 0x12, 0xf4, 0xec, 0x31, 0x83, 0x1e, 0x64,
	0x7c, 0xfe, 0x9f, 0x2c, 0x7e, 0x3a, 0xe8, 0x69, 0xc9, 0xa3, 0xbf, 0x20, 0xb9, 0xfe, 0x25, 0x09,
	0x9e, 0x59, 0x59, 0x5d, 0xff, 0x43, 0xf5, 0x25, 0x3a, 0xb1, 0x5b, 0x63, 0xa0, 0x16, 0x5c, 0x4c,
	0xac, 0xfa, 0x13, 0xc3, 0x7e, 0x36, 0xe4, 0x83, 0xe5, 0x56, 0x1e, 0x2c, 0xb7, 0xa4, 0x44, 0x92,
	0x44, 0x80, 0x94, 0x76, 0xd0, 0x56, 0xe9, 0xca, 0x90, 0xa5, 0x67, 0x78, 0xe5, 0x67, 0x74, 0xaf,
	0x7f, 0xad, 0x02, 0xe7, 0x6e, 0x15, 0x38, 0x7f, 0x56, 0x81, 0xf3, 0x7d, 0x1d, 0xec, 0xdd, 0xad,
	0x83, 0xbd, 0xdf, 0xeb, 0x60, 0xef, 0xcb, 0x9b, 0x94, 0xaa, 0x9b, 0xd9, 0xa8, 0x13, 0xf3, 0x2c,
	0xca, 0xf9, 0x44, 0x5d, 0xd8, 0xa4, 0x51, 0xce, 0xe3, 0x09, 0xa8, 0x8b, 0x98, 0x0b, 0x88, 0x76,
	0x3e, 0x2f, 0xfa, 0x6b, 0x30, 0xf2, 0xf4, 0xdf, 0xfd, 0xf5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x73, 0xea, 0x52, 0xdd, 0x7b, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fees[iNdEx])
			copy(dAtA[i:], m.Fees[iNdEx])
			i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Fees[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Liquidities) > 0 {
		for iNdEx := len(m.Liquidities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Liquidities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridgepool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridgepool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Amounts[iNdEx])
			copy(dAtA[i:], m.Amounts[iNdEx])
			i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Amounts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TokenTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetToken) > 0 {
		i -= len(m.TargetToken)
		copy(dAtA[i:], m.TargetToken)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.TargetToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTransferBySignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTransferBySignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTransferBySignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBridgeLiquidityAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBridgeLiquidityAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBridgeLiquidityAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBridgeLiquidityRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBridgeLiquidityRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBridgeLiquidityRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBridgeSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBridgeSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBridgeSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetToken) > 0 {
		i -= len(m.TargetToken)
		copy(dAtA[i:], m.TargetToken)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.TargetToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetNetwork) > 0 {
		i -= len(m.TargetNetwork)
		copy(dAtA[i:], m.TargetNetwork)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.TargetNetwork)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintBridgepool(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBridgepool(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridgepool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovBridgepool(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovBridgepool(uint64(l))
		}
	}
	if len(m.Liquidities) > 0 {
		for _, e := range m.Liquidities {
			l = e.Size()
			n += 1 + l + sovBridgepool(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, s := range m.Fees {
			l = len(s)
			n += 1 + l + sovBridgepool(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	return n
}

func (m *TokenLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovBridgepool(uint64(l))
		}
	}
	if len(m.Amounts) > 0 {
		for _, s := range m.Amounts {
			l = len(s)
			n += 1 + l + sovBridgepool(uint64(l))
		}
	}
	return n
}

func (m *TokenTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.TargetToken)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	return n
}

func (m *EventTransferBySignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	return n
}

func (m *EventBridgeLiquidityAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	return n
}

func (m *EventBridgeLiquidityRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	return n
}

func (m *EventBridgeSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.TargetNetwork)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.TargetToken)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBridgepool(uint64(l))
	}
	return n
}

func sovBridgepool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridgepool(x uint64) (n int) {
	return sovBridgepool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidities = append(m.Liquidities, &TokenLiquidity{})
			if err := m.Liquidities[len(m.Liquidities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTransferBySignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTransferBySignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTransferBySignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBridgeLiquidityAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBridgeLiquidityAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBridgeLiquidityAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBridgeLiquidityRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBridgeLiquidityRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBridgeLiquidityRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBridgeSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBridgeSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBridgeSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetNetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgepool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgepool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgepool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridgepool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridgepool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridgepool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgepool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridgepool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridgepool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridgepool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridgepool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridgepool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridgepool = fmt.Errorf("proto: unexpected end of group")
)
